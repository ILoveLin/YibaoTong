package com.lzyc.ybtappcal.activity.top;import android.animation.Animator;import android.animation.ObjectAnimator;import android.app.AlertDialog;import android.content.DialogInterface;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.text.TextUtils;import android.view.Gravity;import android.view.MotionEvent;import android.view.View;import android.view.ViewConfiguration;import android.view.ViewGroup;import android.view.animation.AlphaAnimation;import android.view.animation.Animation;import android.view.animation.LinearInterpolator;import android.view.animation.TranslateAnimation;import android.widget.AbsListView;import android.widget.AdapterView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.PopupWindow;import android.widget.RelativeLayout;import android.widget.TextView;import com.baidu.mapapi.model.LatLng;import com.baidu.mapapi.navi.BaiduMapAppNotSupportNaviException;import com.baidu.mapapi.navi.BaiduMapNavigation;import com.baidu.mapapi.navi.NaviParaOption;import com.baidu.mapapi.utils.OpenClientUtil;import com.google.gson.reflect.TypeToken;import com.lzyc.ybtappcal.R;import com.lzyc.ybtappcal.activity.base.BaseActivity;import com.lzyc.ybtappcal.adapter.PopSResultLeftAdapter;import com.lzyc.ybtappcal.adapter.PopSResultRightAdapter;import com.lzyc.ybtappcal.adapter.ScanResultAdapter;import com.lzyc.ybtappcal.adapter.TypeJobStatusAdapter;import com.lzyc.ybtappcal.bean.HospitalBean;import com.lzyc.ybtappcal.bean.SresultAreaBean;import com.lzyc.ybtappcal.bean.SresultStreetBean;import com.lzyc.ybtappcal.bean.TypeJobStatus;import com.lzyc.ybtappcal.constant.Contants;import com.lzyc.ybtappcal.constant.HttpConstant;import com.lzyc.ybtappcal.util.DensityUtils;import com.lzyc.ybtappcal.util.JsonUtil;import com.lzyc.ybtappcal.util.PermissionUtil;import com.lzyc.ybtappcal.util.ScreenUtils;import com.lzyc.ybtappcal.util.SharePreferenceUtil;import com.lzyc.ybtappcal.util.StringUtils;import com.lzyc.ybtappcal.view.RoundedRectListView;import com.lzyc.ybtappcal.view.dialog.LoadingProgressBar;import com.lzyc.ybtappcal.widget.popupwindow.BasePopupWindow;import com.umeng.analytics.MobclickAgent;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import butterknife.BindView;import butterknife.OnClick;/** * 医院社区列表，刷选查看，导航 * * @author yang */public class ScanResultActivity extends BaseActivity implements ScanResultAdapter.OnItemClickListener, Animator.AnimatorListener {    protected static final String TAG = ScanResultActivity.class.getSimpleName();    private static final String SORT_PRICE="price";    private static final String SORT_NEAREST="nearest";    private static final int TIME_LODDING_COUNT_REMOVE = 1000;//加载图标移除等待时长，默认为1秒    private static final int TIME_ANIM = 300;//动画执行时长    private static final int MSG_LISTVIEW_LOADDING_ADD_TYPE_PRICE = 1010;    private static final int MSG_LISTVIEW_LOADDING_REMOVE_TYPE_PRICE = 1020;    private static final int MSG_LISTVIEW_TYPE_DATA_ADD_PRICE = 1030;    @BindView(R.id.tv_content)    TextView tvContent;    @BindView(R.id.iv_arrow)    ImageView ivArrow;    @BindView(R.id.rel_titlebar)    RelativeLayout relTitleBar;    @BindView(R.id.view_line)    View viewLine;    @BindView(R.id.tv_location_open)    TextView tvLocationOpen;    @BindView(R.id.iv_location_icon)    ImageView ivLocationIcon;    @BindView(R.id.rel_location)    RelativeLayout relLocation;    @BindView(R.id.listview)    ListView mListView;    @BindView(R.id.linear_content_view)    LinearLayout linearContentView;    @BindView(R.id.linear_pop)    LinearLayout linearPop;    @BindView(R.id.view_out)    View viewOut;    @BindView(R.id.lv_pop_left)    RoundedRectListView lvPopLeft;    @BindView(R.id.lv_pop_right)    RoundedRectListView lvPopRight;    @BindView(R.id.linear_pop_city)    LinearLayout linearPopCity;    @BindView(R.id.view_pop_nayao_one)    View popShLinearOneView;    @BindView(R.id.tv_pop_sh_one)    TextView popShTvOne;    @BindView(R.id.tv_pop_sh_one2)    TextView popShTvOne2;    @BindView(R.id.linear_pop_sh_one)    LinearLayout popShLinearOne;    @BindView(R.id.view_pop_sh_linear_two)    View popShLinearTwoView;    @BindView(R.id.pop_sh_tv_two)    TextView popShTvTwo;    @BindView(R.id.pop_sh_tv_two2)    TextView popShTvTwo2;    @BindView(R.id.pop_sh_linear_two)    LinearLayout popShLinearTwo;    @BindView(R.id.linear_pop_hospital)    LinearLayout linearPopHospital;    @BindView(R.id.tv_tab_address)    TextView tvTabAddress;    @BindView(R.id.tv_tab_nayao)    TextView tvTabNayao;    @BindView(R.id.tv_tab_price)    TextView tvTabPrice;    @BindView(R.id.tv_tab_juli)    TextView tvTabJuli;    @BindView(R.id.linear_tab)    LinearLayout linearTab;    @BindView(R.id.rel_tab)    RelativeLayout relTab;    @BindView(R.id.tv_tab_nayao_cancel)    TextView tvTabNaYaoCancel;    @BindView(R.id.linear_pop_content)    LinearLayout linearPopContent;    @BindView(R.id.linear_pop_top)    LinearLayout linearPopTop;    private String drugNameID;    private String venderID;    private String specificationsID;    private String drugId;    private View view_footer;    private String typeJob;    private ScanResultAdapter mAdapter;    private int leftPage = 0;    private String lat, lng;    private boolean isReshLeft = false;    private int leftIndex;    private int cLeftPage = -1;    private View footerView;    private ArrayList<HospitalBean> mDatas;    private ArrayList<HospitalBean> hospitalLevelList;//医院等级    private ArrayList<HospitalBean> nearestList;//距离    private boolean isDonePlan = false;    private BasePopupWindow popTransparency;    private LinearLayout footer_ybtlv_linear;    private PopupWindow popJob = null;    private PopSResultRightAdapter childAdapter;    private ArrayList<HospitalBean> lList;    private String area = "";//街道上级地址    private String street = "";//街道地址    private boolean isEnding = false;    private int typePage = 0;    private int mTouchSlop;    private float mFirstY;    private float mCurrentY;    private int direction;    private LoadingProgressBar mLoadingProgressBar;    private String sort;//排序字符串    private int what;    private boolean isReturn=false;    private TypeJobStatusAdapter typeJobStatusAdapter;    private Handler mHandler = new Handler() {        public void handleMessage(Message msg) {            switch (msg.what) {                case MSG_LISTVIEW_LOADDING_ADD_TYPE_PRICE:                    mListView.setEnabled(false);                    try {                        mAdapter.addLoadding();                    } catch (Exception e) {                        e.printStackTrace();                    }                    isReshLeft = true;                    leftIndex = mAdapter.getCount() - 1;                    mHandler.sendEmptyMessage(MSG_LISTVIEW_TYPE_DATA_ADD_PRICE);                    break;                case MSG_LISTVIEW_LOADDING_REMOVE_TYPE_PRICE:                    mAdapter.removeLoadding(leftIndex);                    mListView.setEnabled(true);                    break;                case MSG_LISTVIEW_TYPE_DATA_ADD_PRICE:                    leftPage++;                    requestDrug();                    break;                case 1:                    mHandler.sendEmptyMessageDelayed(2, 100);                    break;                case 2:                    refreshUI();                    break;                default:                    break;            }        }    };    private String currentProvince;    @Override    public int getContentViewId() {        return R.layout.activity_scan_result;    }    @Override    public void init() {        setTitleBarVisibility(View.GONE);        setPageStateView(linearContentView);        showLoading();        mLoadingProgressBar = new LoadingProgressBar(mContext);        lList = new ArrayList<>();        initView();    }    private void initView() {        drugNameID = getIntent().getStringExtra(Contants.KEY_DRUGNAME_ID);        venderID = getIntent().getStringExtra(Contants.KEY_VENDER_ID);        specificationsID = getIntent().getStringExtra(Contants.KEY_SPECIFICATION_ID);        drugId = getIntent().getStringExtra(Contants.KEY_DRUG_ID);        typePage = getIntent().getIntExtra(Contants.KEY_PAGE, typePage);        if (TextUtils.isEmpty(drugNameID)) {            drugNameID = "";        }        if (TextUtils.isEmpty(venderID)) {            venderID = "";        }        if (TextUtils.isEmpty(specificationsID)) {            specificationsID = "";        }        if (TextUtils.isEmpty(drugId)) {            drugId = "";        }        currentProvince = (String) SharePreferenceUtil.get(ScanResultActivity.this, SharePreferenceUtil.PROVICE_TOP_CHOOSE, "北京");        tvTabPrice.setSelected(false);        tvTabPrice.setText("医院等级");        tvTabJuli.setSelected(true);        tvTabJuli.setText("从近到远");        leftPage = 0;        cLeftPage = -1;        mDatas = new ArrayList<>();        mAdapter = new ScanResultAdapter(this, R.layout.item_scan_result, mDatas,this);        footerView = View.inflate(this, R.layout.footer_listview_scanresult, null);        view_footer = footerView.findViewById(R.id.view_footer);        footer_ybtlv_linear = (LinearLayout) footerView.findViewById(R.id.footer_ybtlv_linear);        mListView.addFooterView(footerView, null, false);        mListView.setAdapter(mAdapter);        requestResult();        mListView.setOnScrollListener(new AbsListView.OnScrollListener() {            @Override            public void onScrollStateChanged(AbsListView view, int scrollState) {                if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {                    if (mAdapter.getCount() == mListView.getLastVisiblePosition() && isEnding == false) {                        mHandler.sendEmptyMessage(MSG_LISTVIEW_LOADDING_ADD_TYPE_PRICE);                    }                }            }            @Override            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {            }        });        mTouchSlop = ViewConfiguration.get(this).getScaledTouchSlop();        mListView.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                switch (event.getAction()) {                    case MotionEvent.ACTION_DOWN:                        mFirstY = event.getY();                        break;                    case MotionEvent.ACTION_MOVE:                        mCurrentY = event.getY();                        if (mCurrentY - mFirstY > mTouchSlop) {                            direction = 0;// down                        } else if (mFirstY - mCurrentY > mTouchSlop) {                            direction = 1;// up                        }                        if (direction == 1) {                            hiddenTouchView();                        } else if (direction == 0) {                            showTouchView();                        }                        break;                    case MotionEvent.ACTION_UP:                        break;                }                return false;            }        });    }    @Override    protected void onResume() {        MobclickAgent.onPageStart(TAG);        super.onResume();        boolean isDingwei = (Boolean) SharePreferenceUtil.get(this, SharePreferenceUtil.KEY_DW_STATUS, false);        if (!isDingwei) {            if (currentProvince.equals("北京") || typePage == Contants.VAL_PAGE_MINEPLAN) {                relLocation.setVisibility(View.VISIBLE);            } else {                relLocation.setVisibility(View.GONE);            }        } else {            relLocation.setVisibility(View.GONE);        }        if (popTransparency != null) {            popTransparency.dismiss();            popTransparency = null;            isDonePlan = false;        }        tvContent.setText(StringUtils.getYBJobType(this));    }    @Override    protected void onPause() {        MobclickAgent.onPageEnd(TAG);        super.onPause();    }    /**     * 医保拿药     */    private void popNayoTwoSelected() {        popShTvOne.setTextColor(getResources().getColor(R.color.color_444444));        popShTvOne2.setTextColor(getResources().getColor(R.color.color_666666));        popShTvTwo.setTextColor(getResources().getColor(R.color.base_btn_color));        popShTvTwo2.setTextColor(getResources().getColor(R.color.base_btn_color));        popShLinearOneView.setVisibility(View.GONE);        popShLinearTwoView.setVisibility(View.VISIBLE);        popShLinearOne.setSelected(false);        popShLinearTwo.setSelected(true);        tvTabNayao.setText("医保拿药");        dismissPopBottomYanchi();    }    boolean isRefresh =false;    /**     * 弹窗延迟隐藏     */    private void dismissPopBottomYanchi() {        isRefresh =true;        mHandler.postDelayed(new Runnable() {            @Override            public void run() {                dismissPopBottom();            }        }, 100);    }    /**     * 全部医院点击     */    private void popNayaoOneSelected() {        requestEventCode("e010");        popShTvOne.setTextColor(getResources().getColor(R.color.base_btn_color));        popShTvOne2.setTextColor(getResources().getColor(R.color.base_btn_color));        popShTvTwo.setTextColor(getResources().getColor(R.color.color_444444));        popShTvTwo2.setTextColor(getResources().getColor(R.color.color_666666));        popShLinearOneView.setVisibility(View.VISIBLE);        popShLinearTwoView.setVisibility(View.GONE);        popShLinearOne.setSelected(true);        popShLinearTwo.setSelected(false);        tvTabNayao.setText("全部医院");        dismissPopBottomYanchi();    }    /**     * 地址弹窗     */    private void popBottomAddress() {        tvTabAddress.setSelected(true);        tvTabNayao.setSelected(false);        int bottomHieght = relTab.getHeight();        TranslateAnimation animatorBottom = new TranslateAnimation(0, 0, 0, bottomHieght);        animatorBottom.setInterpolator(new LinearInterpolator());        animatorBottom.setDuration(TIME_ANIM);        relTab.startAnimation(animatorBottom);        animatorBottom.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                relTab.setVisibility(View.GONE);                linearPopHospital.setVisibility(View.GONE);                TranslateAnimation animation1 = new TranslateAnimation(0, 0, linearPopContent.getHeight(), 0);                animation1.setInterpolator(new LinearInterpolator());                animation1.setDuration(500);                linearPopContent.startAnimation(animation1);                animation1.setAnimationListener(new Animation.AnimationListener() {                    @Override                    public void onAnimationStart(Animation animation) {                        linearPopCity.setVisibility(View.VISIBLE);                        tvTabNaYaoCancel.setVisibility(View.VISIBLE);                        linearPop.setVisibility(View.VISIBLE);                        setPopLinearAlpha(true, linearPop);                    }                    @Override                    public void onAnimationEnd(Animation animation) {                    }                    @Override                    public void onAnimationRepeat(Animation animation) {                    }                });            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });    }    private void setPopLinearAlpha(boolean isAlphaAnim, LinearLayout popLinear) {        setPopLinearAlphaWtihDuration(isAlphaAnim, popLinear, 500);    }    private void setPopLinearAlphaWtihDuration(boolean isAlphaAnim, LinearLayout popLinear, int duration) {        AlphaAnimation alphaAnimation;        if (isAlphaAnim) {            alphaAnimation = new AlphaAnimation(0f, 1f);        } else {            alphaAnimation = new AlphaAnimation(1f, 0f);        }        alphaAnimation.setDuration(duration);        popLinear.startAnimation(alphaAnimation);    }    /**     * 拿药弹窗     */    private void popBottomNayao() {        tvTabNayao.setSelected(true);        tvTabAddress.setSelected(false);        int bottomHieght = relTab.getHeight();        TranslateAnimation animatorBottom = new TranslateAnimation(0, 0, 0, bottomHieght);        animatorBottom.setInterpolator(new LinearInterpolator());        animatorBottom.setDuration(TIME_ANIM);        relTab.startAnimation(animatorBottom);        animatorBottom.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                relTab.setVisibility(View.GONE);                linearPopCity.setVisibility(View.GONE);                TranslateAnimation animation1 = new TranslateAnimation(0, 0, linearPopContent.getHeight(), 0);                animation1.setInterpolator(new LinearInterpolator());                animation1.setDuration(500);                linearPopContent.startAnimation(animation1);                animation1.setAnimationListener(new Animation.AnimationListener() {                    @Override                    public void onAnimationStart(Animation animation) {                        linearPopHospital.setVisibility(View.VISIBLE);                        tvTabNaYaoCancel.setVisibility(View.VISIBLE);                        linearPop.setVisibility(View.VISIBLE);                        setPopLinearAlpha(true, linearPop);                    }                    @Override                    public void onAnimationEnd(Animation animation) {                    }                    @Override                    public void onAnimationRepeat(Animation animation) {                    }                });            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });    }    /**     * 扫描结果     */    private void requestResult() {        requestEventCode("e010");        popShTvOne.setTextColor(getResources().getColor(R.color.base_btn_color));        popShTvOne2.setTextColor(getResources().getColor(R.color.base_btn_color));        popShTvTwo.setTextColor(getResources().getColor(R.color.color_444444));        popShTvTwo2.setTextColor(getResources().getColor(R.color.color_666666));        popShLinearOneView.setVisibility(View.VISIBLE);        popShLinearTwoView.setVisibility(View.INVISIBLE);        popShLinearOne.setSelected(true);        popShLinearTwo.setSelected(false);        tvTabNayao.setText("全部医院");        requestDrug();    }    @Override    public void done(String msg, int what, JSONObject response) {        super.done(msg, what, response);        switch (what) {            case HttpConstant.RESULTS_HOSPITAL_LIST:                try {                    JSONObject data = response.getJSONObject(HttpConstant.DATA);                    List<SresultAreaBean> areaDara = JsonUtil.getListModle(data.toString(), HttpConstant.AREA_AND_STREET, new TypeToken<ArrayList<SresultAreaBean>>() {                    }.getType());                    fillAddress(areaDara);                    Contants.oldType = (String) SharePreferenceUtil.get(ScanResultActivity.this, SharePreferenceUtil.KEY_OBJ_TYPE_JOB, Contants.STR_TYPE_JOB);                    lList = JsonUtil.getListModle2(data.toString(), HttpConstant.HOSLIST, new TypeToken<ArrayList<HospitalBean>>() {                    }.getType());                    if (lList == null) {                        lList = new ArrayList<>();                    }                    fillList(lList);//                    final List<DrugBean> recDrugList = JsonUtil.getListModle(data.toString(), "recDrug", new TypeToken<ArrayList<DrugBean>>() {//                    }.getType());//                    if (recDrugList.isEmpty()) {//                        switch (typePage) {//                            case Contants.VAL_PAGE_SEARCH_DURUG://                                requestEventCode("d006");//                                break;//                            case Contants.VAL_PAGE_SAOMA://                                requestEventCode("a003");//                                break;//                            default://                                break;//                        }//                    } else {//                        switch (typePage) {//                            case Contants.VAL_PAGE_SEARCH_DURUG://                                requestEventCode("d005");//                                break;//                            case Contants.VAL_PAGE_SAOMA://                                requestEventCode("a012");//                                break;//                            default://                                break;//                        }//                    }                } catch (JSONException e) {                    e.printStackTrace();                    showErrorServer();                }            default:                break;        }    }    /**     * 填充地址数据     *     * @param areaDara     */    private void fillAddress(List<SresultAreaBean> areaDara) {        if (areaDara.isEmpty()) {            return;        }        final PopSResultLeftAdapter groupAdapter = new PopSResultLeftAdapter(ScanResultActivity.this, R.layout.item_pop_lv_left, areaDara);        lvPopLeft.setAdapter(groupAdapter);        groupAdapter.setItemSelected(0);        childAdapter = new PopSResultRightAdapter(ScanResultActivity.this, R.layout.item_pop_lv_right, areaDara.get(0).getStreetList());        lvPopRight.setAdapter(childAdapter);        childAdapter.setItemSelected(0);        lvPopLeft.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {                SresultAreaBean group = (SresultAreaBean) adapterView.getItemAtPosition(position);                String childItemSelected = tvTabAddress.getText().toString();//获取childItem选中项                groupAdapter.updateItem(group);                List<SresultStreetBean> listChild = group.getStreetList();                childAdapter = new PopSResultRightAdapter(ScanResultActivity.this, R.layout.item_pop_lv_right, listChild);                lvPopRight.setAdapter(childAdapter);                childAdapter.setItemSelected(childItemSelected);//清空选择历史，只记住唯一被选项                area = group.getArea();//网络请求时，给area赋值            }        });        lvPopRight.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {                SresultStreetBean childAddressBean = (SresultStreetBean) adapterView.getItemAtPosition(position);                childAdapter.updateItem(childAddressBean);                tvTabAddress.setText(childAddressBean.getStreet());                dismissPopBottomYanchi();                if(childAddressBean.getStreet().equals("全北京")){//点击“全北京”按钮                    requestEventCode("e001");                }                street = childAddressBean.getStreet();//网络请求时，给street赋值            }        });    }    /**     * 填充列表数据     *     * @param list     */    private void fillList(List<HospitalBean> list) {        if (isReshLeft) {            mHandler.sendEmptyMessageDelayed(MSG_LISTVIEW_LOADDING_REMOVE_TYPE_PRICE, TIME_LODDING_COUNT_REMOVE);        }        if (leftPage > cLeftPage) {            if (list.isEmpty()) {                isEnding = true;                view_footer.setVisibility(View.GONE);                footer_ybtlv_linear.setVisibility(View.VISIBLE);            } else {                view_footer.setVisibility(View.VISIBLE);                footer_ybtlv_linear.setVisibility(View.GONE);            }            cLeftPage = leftPage;            if (leftPage == 0) {                relTab.setVisibility(View.VISIBLE);                if (!mDatas.isEmpty()) {                    mDatas.clear();                }            }            mDatas.addAll(list);            mAdapter.notifyDataSetChanged();        }        if (mAdapter.getCount() < 3) {            isEnding = true;            view_footer.setVisibility(View.GONE);            footer_ybtlv_linear.setVisibility(View.GONE);            if (relTab.getVisibility() == View.GONE && mAdapter.getCount() != 0) {                relTab.setVisibility(View.GONE);            }        } else if (mAdapter.getCount() >= 5 && mAdapter.getCount() < 10) {            isEnding = true;            view_footer.setVisibility(View.GONE);            footer_ybtlv_linear.setVisibility(View.VISIBLE);            if (relTab.getVisibility() == View.GONE && mAdapter.getCount() != 0) {                relTab.setVisibility(View.GONE);            }        }        if (mLoadingProgressBar != null && mLoadingProgressBar.isShowing()) {            mLoadingProgressBar.dismiss();        }        showContent();        if (mAdapter.getCount() == 0) {            showEmpty("没有找到符合条件的医院/社区", R.mipmap.icon_drugdetail_shequ_empty);        }        if(sort.equals(SORT_PRICE)){//医院等级            hospitalLevelList=mDatas;        }else{//距离            nearestList =mDatas;        }    }    @Override    public void error(String errorMsg) {        super.error(errorMsg);        if(what==HttpConstant.RESULTS_HOSPITAL_LIST){            if(mAdapter.getCount()==0){                showError();            }else{                showToast("网络不给力");            }        }    }    //网络请求    /**     * 按筛选条件请求数据     */    private void requestDrug() {        String yibao = tvTabNayao.getText().toString();        if (area.equals("北京市")) {//如果是全北京传空串            area = "";        }        if (!TextUtils.isEmpty(street)) {//如果street不是空字符串            if (street.indexOf("全") != -1) {//如果street字符串中包含‘全’字，street置空                street = "";            }        }        if (yibao.equals("全部医院")) {            yibao = "0";//包括所有的医院和社区医疗服务站        } else {            yibao = "1";//我的定点医院和无需定点医院        }        if (tvTabPrice.isSelected()) {            sort = SORT_PRICE;//价格，新UI的医院等级，参数不变        } else {            sort = SORT_NEAREST;//附近        }        lat = (String) SharePreferenceUtil.get(this, SharePreferenceUtil.LATITUDE, "");        lng = (String) SharePreferenceUtil.get(this, SharePreferenceUtil.LONGITUDE, "");        String ybType = (String) SharePreferenceUtil.get(this, SharePreferenceUtil.KEY_OBJ_TYPE_JOB, Contants.STR_TYPE_JOB);        String phone = (String) SharePreferenceUtil.get(this, SharePreferenceUtil.PHONE, "");        Map<String, String> params = new HashMap<String, String>();        params.put(HttpConstant.PARAM_KEY_APP, HttpConstant.APP_HOME);        params.put(HttpConstant.PARAM_KEY_CLASS, HttpConstant.HOME_RESULTS_HOSPITAL_CLZ);        params.put(HttpConstant.PARAM_KEY_SIGN, HttpConstant.HOME_RESULTSHOSPITAL_SIGN);        params.put(HttpConstant.PARAM_KEY_ID_DRUGNAME, drugNameID);        params.put(HttpConstant.PARAM_KEY_ID_VENDER, venderID);        params.put(HttpConstant.PARAM_KEY_ID_SPECIFICATIONS, specificationsID);        params.put(HttpConstant.PARAM_KEY_PAGEINDEX, leftPage + "");        params.put(HttpConstant.PARAM_KEY_PHONE, phone);        params.put(HttpConstant.PARAM_KEY_LAT, lat);        params.put(HttpConstant.PARAM_KEY_LNG, lng);        params.put(HttpConstant.PARAM_KEY_YBTYPE, ybType);        params.put(HttpConstant.PARAM_KEY_AREA, area);        params.put(HttpConstant.PARAM_KEY_STREET, street);        params.put(HttpConstant.PARAM_KEY_YIBAO, yibao);//        params.put(HttpConstant.PARAM_KEY_SORT, sort);        if (typePage == Contants.VAL_PAGE_MINEPLAN) {//如果我的本地方案过来的话，显示北京的数据            params.put(HttpConstant.PARAM_KEY_PROVINCE, "北京");        } else {            params.put(HttpConstant.PARAM_KEY_PROVINCE, currentProvince);        }        if (drugId != null) {            params.put(HttpConstant.PARAM_KEY_ID_DRUG, drugId);        }        what=HttpConstant.RESULTS_HOSPITAL_LIST;        request(params, HttpConstant.RESULTS_HOSPITAL_LIST);    }//    private void switchToHospitalDrugDetailActivity(HospitalBean hospitalBean) {//        popTransparency();//        if (hospitalBean != null && placedData != null) {//            Intent intent = new Intent(this, HospitalDrugDetailActivity.class);//            intent.putExtra(Contants.KEY_OBJ_HOSPITALBEAN, hospitalBean);//            intent.putExtra(Contants.KEY_OBJ_PLACEDATA, placedData);//            startActivity(intent);//        } else {//            ToastUtil.showShort(this, "药品信息为空！");//            if (popTransparency != null) {//                popTransparency.dismiss();//                popTransparency = null;//                isDonePlan = false;//            }//        }//    }    @Override    public void OnChildLeftClickListener(int position, HospitalBean item) {        if (isDonePlan == false) {            isDonePlan = true;//            EventBus.getDefault().post(new Event("e008"));        }    }    @Override    public void OnChildRightClickListener(int position, final HospitalBean item) {        requestEventCode("e005");        startNavi(item.getLat(), item.getLng(), item.getName());    }    /**     * 启动百度地图导航(Native)     */    public void startNavi(String latTarget, String lngTarget, String addressTarget) {        String address = (String) SharePreferenceUtil.get(this, SharePreferenceUtil.ADDRESS, "");        LatLng pt1;        LatLng pt2;        if (!TextUtils.isEmpty(lat) && !TextUtils.isEmpty(lng)) {            pt1 = new LatLng(Double.parseDouble(lat), Double.parseDouble(lng));        } else {            showToast("医院经纬度为空，无法导航");            return;        }        if (!TextUtils.isEmpty(latTarget) && !TextUtils.isEmpty(lngTarget)) {            pt2 = new LatLng(Double.parseDouble(latTarget), Double.parseDouble(lngTarget));        } else {            showToast("我的定位经纬度为空");            return;        }        try {            NaviParaOption para = new NaviParaOption()                    .startPoint(pt1).endPoint(pt2)                    .startName(address).endName(addressTarget);            BaiduMapNavigation.openBaiduMapNavi(para, this);        } catch (BaiduMapAppNotSupportNaviException e) {            e.printStackTrace();            showDialog();        }catch (Exception e){        }    }    /**     * 提示未安装百度地图app或app版本过低     */    public void showDialog() {        AlertDialog.Builder builder = new AlertDialog.Builder(this);        builder.setMessage("您尚未安装百度地图app或app版本过低，点击确认安装？");        builder.setTitle("提示");        builder.setPositiveButton("确认", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();                OpenClientUtil.getLatestBaiduMapApp(ScanResultActivity.this);            }        });        builder.setNegativeButton("取消", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();            }        });        builder.create().show();    }    private void popTransparency() {        isDonePlan = true;        int w = ScreenUtils.getScreenWidth() - DensityUtils.dp2px(30);        popTransparency = new BasePopupWindow(this, R.layout.pop_transparency, w, ViewGroup.LayoutParams.MATCH_PARENT);        isDonePlan = true;        popTransparency.showPopupWindow(mListView, Gravity.CENTER);    }    /**     * 滑动显示动画     */    private void showTouchView() {        if (relTab.getVisibility() == View.VISIBLE) {            return;        }        int bottomHeight = relTab.getHeight();        TranslateAnimation animatorBottom = new TranslateAnimation(0, 0, bottomHeight, 0);        animatorBottom.setInterpolator(new LinearInterpolator());        animatorBottom.setDuration(TIME_ANIM);        relTab.startAnimation(animatorBottom);        if (currentProvince.equals("北京") || typePage == Contants.VAL_PAGE_MINEPLAN) {            relTab.setVisibility(View.VISIBLE);        } else {            relTab.setVisibility(View.GONE);        }    }    /**     * 滑动隐藏动画     */    private void hiddenTouchView() {        if (relTab.getVisibility() == View.GONE) {            return;        }        int bottomHieght = relTab.getHeight();        TranslateAnimation animatorBottom = new TranslateAnimation(0, 0, 0, bottomHieght);        animatorBottom.setInterpolator(new LinearInterpolator());        animatorBottom.setDuration(TIME_ANIM);        relTab.startAnimation(animatorBottom);        relTab.setVisibility(View.GONE);    }    private void refreshUI() {        isReshLeft=false;        isEnding = false;        leftPage = 0;        isRefresh=false;        cLeftPage = -1;        if (footer_ybtlv_linear != null) {            footer_ybtlv_linear.setVisibility(View.GONE);        }        mLoadingProgressBar.show();        mHandler.postDelayed(new Runnable() {            @Override            public void run() {                mDatas = new ArrayList<>();                mAdapter = new ScanResultAdapter(ScanResultActivity.this, R.layout.item_scan_result, mDatas,ScanResultActivity.this);                mListView.setAdapter(mAdapter);                requestDrug();            }        },500);    }    @Override    public void onBackPressed() {        if (linearPopCity.getVisibility() == View.VISIBLE || linearPopHospital.getVisibility() == View.VISIBLE&&!isReturn) {            isReturn=true;            dismissPopBottom();            return;        }        if(linearPopTop.getVisibility()==View.VISIBLE&&!isReturn){            isReturn=true;            dismissPopJob();            return;        }        super.onBackPressed();    }    /**     * 隐藏弹窗，底部弹出，tab弹出     */    private void dismissPopBottom() {        tvTabAddress.setSelected(false);        tvTabNayao.setSelected(false);        TranslateAnimation animation1 = new TranslateAnimation(0, 0, 0, linearPopContent.getHeight());        animation1.setInterpolator(new LinearInterpolator());        animation1.setDuration(500);        linearPopContent.startAnimation(animation1);        animation1.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                linearPopCity.setVisibility(View.GONE);                linearPopHospital.setVisibility(View.GONE);                setPopLinearAlpha(false, linearPop);                linearPop.setVisibility(View.GONE);                int bottomHieght = relTab.getHeight();                TranslateAnimation animatorBottom = new TranslateAnimation(0, 0, bottomHieght, 0);                animatorBottom.setInterpolator(new LinearInterpolator());                animatorBottom.setDuration(TIME_ANIM);                relTab.startAnimation(animatorBottom);                animatorBottom.setAnimationListener(new Animation.AnimationListener() {                    @Override                    public void onAnimationStart(Animation animation) {                        viewOut.setVisibility(View.INVISIBLE);                        tvTabNaYaoCancel.setVisibility(View.GONE);                    }                    @Override                    public void onAnimationEnd(Animation animation) {                        relTab.setVisibility(View.VISIBLE);                        tvTabAddress.setClickable(true);                        viewOut.setClickable(true);                        tvTabNayao.setClickable(true);                        tvTabNaYaoCancel.setClickable(true);                        popShLinearTwo.setClickable(true);                        popShLinearOne.setClickable(true);                        isReturn=false;                        if(isRefresh){                            refreshUI();                        }                    }                    @Override                    public void onAnimationRepeat(Animation animation) {                    }                });            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });    }    @Override    public void onAnimationStart(Animator animator) {    }    @Override    public void onAnimationEnd(Animator animator) {    }    @Override    public void onAnimationCancel(Animator animator) {    }    @Override    public void onAnimationRepeat(Animator animator) {    }    /**     * 弹出职位状态     */    private void popupJobType() {        ObjectAnimator animator = ObjectAnimator.ofFloat(ivArrow, "rotation", 0F, 180F);        animator.setDuration(300);        animator.addListener(new Animator.AnimatorListener() {            @Override            public void onAnimationStart(Animator animation) {                linearPopTop.setVisibility(View.VISIBLE);                setPopLinearAlphaWtihDuration(true, linearPopTop, 300);            }            @Override            public void onAnimationEnd(Animator animation) {            }            @Override            public void onAnimationCancel(Animator animation) {            }            @Override            public void onAnimationRepeat(Animator animation) {            }        });        animator.start();        View conentView = View.inflate(this, R.layout.popup_type_job, null);        popJob = new PopupWindow(conentView, ScreenUtils.getScreenWidth(), ScreenUtils.getScreenHeight() - ScreenUtils.getStatusHeight() - DensityUtils.dp2px(50));        String[] typeJobs = getResources().getStringArray(R.array.type_job);        String[] typeJobsType = getResources().getStringArray(R.array.type_job_status);        List<TypeJobStatus> list = new ArrayList<TypeJobStatus>();        for (int i = 0; i < typeJobs.length; i++) {            TypeJobStatus s = new TypeJobStatus();            typeJob = (String) SharePreferenceUtil.get(this, SharePreferenceUtil.KEY_OBJ_TYPE_JOB, Contants.STR_TYPE_JOB);            s.setTypeJob(typeJobsType[i]);            if (typeJob.equals(typeJobsType[i])) {                s.setSelected(true);                SharePreferenceUtil.put(this, SharePreferenceUtil.KEY_OBJ_TYPE_JOB, s.getTypeJob());            } else {                s.setSelected(false);            }            s.setDesc(typeJobs[i]);            list.add(s);        }        ListView jobTypeListView = (ListView) conentView.findViewById(R.id.pop_typejob_lv);        typeJobStatusAdapter = new TypeJobStatusAdapter(this, R.layout.item_pop_type_job, list);        jobTypeListView.setAdapter(typeJobStatusAdapter);        jobTypeListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(final AdapterView<?> adapterView, View view, final int i, long l) {                TypeJobStatus ts = (TypeJobStatus) adapterView.getItemAtPosition(i);                ts.setSelected(true);                typeJob = ts.getTypeJob();                SharePreferenceUtil.put(mContext, SharePreferenceUtil.KEY_OBJ_TYPE_JOB, typeJob);                typeJobStatusAdapter.updateItem(i, ts);                tvContent.setText(ts.getDesc());                mHandler.postDelayed(new Runnable() {                    @Override                    public void run() {                        dismissPopJob();                        refreshUI();                    }                }, 500);            }        });        popJob.setAnimationStyle(R.style.PopStyleTranslate);        popJob.showAsDropDown(relTitleBar);        conentView.findViewById(R.id.pop_out).setOnClickListener(typeJobOnClickListener);    }    private View.OnClickListener typeJobOnClickListener = new View.OnClickListener() {        @Override        public void onClick(View view) {            switch (view.getId()) {                case R.id.pop_out:                    dismissPopJob();                    break;            }        }    };    private void dismissPopJob() {        popJob.dismiss();        popJob = null;        ObjectAnimator animator = ObjectAnimator.ofFloat(ivArrow, "rotation", 180f, 0f);        animator.setDuration(300);        animator.addListener(new Animator.AnimatorListener() {            @Override            public void onAnimationStart(Animator animation) {                setPopLinearAlphaWtihDuration(false, linearPopTop, 300);            }            @Override            public void onAnimationEnd(Animator animation) {                linearPopTop.setVisibility(View.GONE);                isReturn=false;            }            @Override            public void onAnimationCancel(Animator animation) {            }            @Override            public void onAnimationRepeat(Animator animation) {            }        });        animator.start();    }    @OnClick({R.id.ib_left_scan, R.id.tv_content, R.id.iv_arrow,            R.id.ib_right_scan, R.id.view_out, R.id.tv_tab_address, R.id.tv_tab_nayao,            R.id.tv_tab_juli, R.id.tv_tab_price, R.id.linear_pop_sh_one,            R.id.pop_sh_linear_two, R.id.tv_location_open, R.id.tv_tab_nayao_cancel})    public void onViewClicked(View view) {        switch (view.getId()) {            case R.id.ib_left_scan:                ScanResultActivity.this.finish();                break;            case R.id.tv_content:            case R.id.iv_arrow:                requestEventCode("e003");                if (popJob == null) {                    popupJobType();                } else {                    dismissPopJob();                }                break;            case R.id.ib_right_scan:                requestEventCode("i001");                Bundle bundle = new Bundle();                ArrayList<HospitalBean> list=new ArrayList<>();                if(mAdapter.getList().size()>0){                    for (HospitalBean h:mAdapter.getList()) {                        list.add(h);                    }                }                bundle.putSerializable("list", list);                bundle.putInt(Contants.KEY_PAGE_YIYUANWEIZHI, Contants.VAL_PAGE_YIYUANWEIZHI_SRESULT);                openActivity(HospitalNearbyActivity.class, bundle);                break;            case R.id.view_out:                viewOut.setClickable(false);                dismissPopBottom();                break;            case R.id.tv_tab_address:                tvTabAddress.setClickable(false);                viewOut.setVisibility(View.VISIBLE);                if (linearPopCity.getVisibility() == View.GONE) {                    popBottomAddress();                } else {                    dismissPopBottom();                }                break;            case R.id.tv_tab_nayao://tab 拿药                tvTabNayao.setClickable(false);                viewOut.setVisibility(View.VISIBLE);                if (linearPopHospital.getVisibility() == View.GONE) {                    popBottomNayao();                } else {                    dismissPopBottom();                }                break;            case R.id.tv_tab_juli://tab 距离                requestEventCode("e007");                tvTabJuli.setText("从近到远");                tvTabJuli.setSelected(true);                tvTabPrice.setSelected(false);                tvTabPrice.setText("医院等级");                refreshUI();                break;            case R.id.tv_tab_price://价格,医院等级                requestEventCode("e012");                tvTabPrice.setText("医院等级");                tvTabJuli.setSelected(false);                tvTabPrice.setSelected(true);                tvTabJuli.setText("距离");                refreshUI();                break;            case R.id.linear_pop_sh_one:                popShLinearOne.setClickable(false);                popNayaoOneSelected();                break;            case R.id.pop_sh_linear_two:                popShLinearTwo.setClickable(false);                popNayoTwoSelected();                break;            case R.id.tv_location_open:                PermissionUtil.getInstance().showDingwei();                break;            case R.id.tv_tab_nayao_cancel:                tvTabNaYaoCancel.setClickable(false);                dismissPopBottom();                break;        }    }    protected void onClickRetry() {        showLoading();        leftPage = 0;        cLeftPage = -1;        requestResult();    }    @Override    protected void onDestroy() {        mHandler.removeCallbacksAndMessages(null);        super.onDestroy();    }}